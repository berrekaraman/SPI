
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity master_tb is

end master_tb;

architecture Behavioral of master_tb is
 
component master is
port(
i_sys_clk          : in std_logic                      ;

i_write_bus        : in std_logic_vector(7 downto 0)   ;
o_read_bus         : out std_logic_vector(7 downto 0)  ;
i_address_bus      : in std_logic_vector(1 downto 0)   ;
i_we               : inout  std_logic                  ;
i_re               : inout  std_logic                  ;
                                                
o_mosi             : out std_logic                     ; 
o_mosi_reg         : in std_logic_vector(7 downto 0)   ;                         
i_miso             : inout std_logic                   ;                   
                
o_spi_clk          : out  std_logic                         
); 
end component;

signal i_sys_clk            :std_logic                    :='0'   ;    
   
signal i_write_bus          :std_logic_vector(7 downto 0) :=x"00" ;  
signal o_read_bus           :std_logic_vector(7 downto 0)         ;  
signal i_address_bus        :std_logic_vector(1 downto 0) :="00"  ;   
signal i_we                 :std_logic                    :='0'   ;    
signal i_re                 :std_logic                    :='0'   ;    


signal o_mosi               :std_logic                            ;  
signal i_miso               :std_logic                     :='0'  ;         
   
signal o_spi_clk            :std_logic                    :='0'   ;     
signal i_miso_reg           :std_logic_vector(7 downto 0) :=x"00" ;     
signal o_mosi_reg           :std_logic_vector(7 downto 0) :=x"00" ;     
  

begin

uut: master
port map(
i_sys_clk     =>i_sys_clk     ,
                     
i_write_bus   =>i_write_bus   ,
o_read_bus    =>o_read_bus    ,
i_address_bus =>i_address_bus ,
i_we          =>i_we          ,
i_re          =>i_re          ,

o_mosi        =>o_mosi        ,
o_mosi_reg    =>o_mosi_reg    ,
i_miso        =>i_miso        ,
                         
o_spi_clk     =>o_spi_clk                
);

p_CLK_GEN : process begin
i_sys_clk <= '0'           ;
wait for 5 ns              ;
i_sys_clk <= '1'           ;
wait for 5 ns              ;
end process p_CLK_GEN      ;

process
begin 

wait for 60 ns;
--------write operation-------------------
i_address_bus<="01"   ;
i_write_bus<=x"cc"    ;
i_we <= '1'           ;  -------if you dont toggle i_we, wrting will continous as write bus change------------    
wait for 10 ns;
i_we <= '0' ;
----------------slave simulation---------------
wait for 60 ns;
i_miso_reg<=x"a5"     ; ------simulating slave--------
i_address_bus<="10" ; ------if you open re before rx loaded completely it will read every corresponding value of rx------------
i_re<='1';
wait for 600 ns;        -----------rx is getting loaded----------

----------------read operation----------------
i_address_bus<="10"   ;     
i_re<='1';
wait for 10 ns;
i_re<='0';
-------change clock divider------------
wait for 60 ns;
i_address_bus<="00"   ;
i_write_bus<=x"03"    ;
i_we<='1';
wait for 10 ns;
i_we <= '0'           ;
--------write operation-----------------
wait for 60 ns;
i_address_bus<="01"   ;
i_write_bus<=x"a5"    ;
i_we <= '1'           ;
wait for 30 ns;
i_we <= '0'           ;
--------write operation-----------------
wait for 900 ns;
i_address_bus<="01"   ;
i_write_bus<=x"b4"    ;
i_we <= '1'           ;
wait for 60 ns;
i_we <= '0'           ;

wait;
end process;
------------------i_miso_testbench---falling edge---------------------
process(o_spi_clk)
variable cntr: integer:=0;
begin
if falling_edge(o_spi_clk) then 
    
if cntr<7 then  
    i_miso<=i_miso_reg(cntr);
    cntr:=cntr+1;
elsif cntr=7 then     
    i_miso<=i_miso_reg(7);   
    cntr:=0;
end if;

end if;
end process;

--------------o_mosi_testbench-----falling edge-----------------------------------------
process(o_spi_clk)
variable cntr: integer:=0;
begin
if falling_edge(o_spi_clk) then 

if cntr<7 then    
    o_mosi_reg(cntr)<=o_mosi;
    cntr:=cntr+1;
elsif cntr=7 then  
    o_mosi_reg(7)<=o_mosi;   
    cntr:=0;
end if;

end if;
end process;

end  Behavioral     ;
